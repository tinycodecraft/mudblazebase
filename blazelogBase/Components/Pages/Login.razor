@using Microsoft.AspNetCore.Authentication.Cookies
@inject LayoutStateModel GlobalState
@inject ISender Commander
@inject IN.IAuthService AuthService
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@using blazelogBase.Controllers
@using blazelogBase.Models
@using blazelogBase.Components.Layout
@using MudBlazor


<LayoutView Layout="typeof(MudaLayout)">
    <PageTitle>Login</PageTitle>
    <HeadContent>
        <style>
            main {
            background: #9A616D;
            }
        </style>
    </HeadContent>
    <div class="row d-flex justify-content-center align-items-center">
        <div class="col-12 col-md-8 col-lg-6 col-xl-5">
            <MudContainer MaxWidth="MaxWidth.Medium" Class="py-5 h-100" Style="background-color:rgb(66,66,66)">
                <div class="d-flex justify-content-center align-items-center mb-3 pb-1">
                    <i class="fas fa-cubes fa-2x me-3" style="color: #ff6219;"></i>
                    <span class="h1 fw-bold mb-0" style="color:papayawhip">Logo</span>
                </div>

                <h5 class="fw-normal mb-3 pb-3" style="letter-spacing: 1px;">Sign into your account</h5>
                <MudPaper Class="pa-4">
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                        <MudTextField Variant="Variant.Outlined" T="string" Label="User ID" Required="true" RequiredError="User name is required!" @bind-Value="@model.UserId" />
                        <MudTextField Variant="Variant.Outlined" T="string" Label="Email" Required="true" RequiredError="Email is required!"
                        Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                        <MudTextField Variant="Variant.Outlined" T="string" Label="Password" HelperText="Choose a strong password" @ref="pwprimref"
                        InputType="@passwordInputType"
                        @bind-Value="@model.Password"
                        Adornment="Adornment.End" AdornmentIcon="@InputIcon" OnAdornmentClick="@TogglePasswordIcon"
                        Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                        RequiredError="Password is required!" />
                        <MudTextField Variant="Variant.Outlined" T="string"
                        Label="Password" HelperText="Confirm password" InputType="@passwordInputType"
                        Adornment="Adornment.End" AdornmentIcon="@InputIcon" OnAdornmentClick="@TogglePasswordIcon"
                        Validation="@(new Func<string, string>(PasswordMatch))" />

                        <div class="pt-1 mb-4">
                            <button class="btn btn-info btn-lg btn-block" type="button" @onclick="()=> Login()">Login</button>
                        </div>
                    </MudForm>
                </MudPaper>
                <MudPaper Class="pa-4 mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@(()=>form.Validate())">Validate</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton>
                    <MudButton Variant="Variant.Filled" DropShadow="false" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
                </MudPaper>
            </MudContainer>
        </div>
    </div>


</LayoutView>



@code {

    bool success;
    string[] errors = { };
    MudTextField<string> pwprimref;
    MudForm form;

    private LoginModel model = new LoginModel();

    InputType passwordInputType = InputType.Password;
    private string InputIcon = Icons.Material.Filled.VisibilityOff;
    private bool isShow = false;

    private async Task Login()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var principalresult = await AuthService.Authenticate(model.UserId, model.Password) ;

            // settings for the authentication properties
            var authProperties = new AuthenticationProperties
            {

                //AllowRefresh = <bool>,
                // Refreshing the authentication session should be allowed.

                //ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(10),
                // The time at which the authentication ticket expires. A
                // value set here overrides the ExpireTimeSpan option of
                // CookieAuthenticationOptions set with AddCookie.

                //IsPersistent = true,
                // Whether the authentication session is persisted across
                // multiple requests. When used with cookies, controls
                // whether the cookie's lifetime is absolute (matching the
                // lifetime of the authentication ticket) or session-based.

                //IssuedUtc = <DateTimeOffset>,
                // The time at which the authentication ticket was issued.

                //RedirectUri = <string>
                // The full path or absolute URI to be used as an http
                // redirect response value.
            };
            var principal =  principalresult.Value as ClaimsPrincipal;

            if(principalresult.IsError || principalresult.Value==null)
            {
                errors = new[] { principalresult.FirstError.ToString() };
                StateHasChanged();
                return;
            }

            await HttpContextAccessor.HttpContext!.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal!, authProperties);
            

        }
    }

    private void TogglePasswordIcon()
    {
        if (isShow)
        {
            InputIcon = Icons.Material.Filled.VisibilityOff;
            isShow = false;
            passwordInputType = InputType.Password;
        }
        else
        {
            InputIcon = Icons.Material.Filled.Visibility;
            isShow = true;
            passwordInputType = InputType.Text;
        }

    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwprimref.Value != arg)
            return "Passwords don't match";
        return null;
    }

}
